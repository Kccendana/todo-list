//install jsdom environment
npm install jest-environment-jsdom --save-dev


//package.json
{
  "name": "webpack",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "jest --coverage",
    "start": "webpack serve --open",
    "build": "webpack"
  },
  "jest": {
    "testEnvironment": "jest-environment-jsdom",
    "transform": {
      "^.+\\.jsx?$": "babel-jest"
    }
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@babel/preset-env": "^7.22.9",
    "babel-eslint": "^10.1.0",
    "babel-jest": "^29.6.1",
    "css-loader": "^6.8.1",
    "eslint": "^7.32.0",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-plugin-import": "^2.27.5",
    "hint": "^7.1.10",
    "html-webpack-plugin": "^5.5.3",
    "jest": "^29.6.1",
    "jest-environment-jsdom": "^29.6.1",
    "jest-localstorage-mock": "^2.4.26",
    "jsdom": "^22.1.0",
    "style-loader": "^3.3.3",
    "stylelint": "^13.13.1",
    "stylelint-config-standard": "^21.0.0",
    "stylelint-csstree-validator": "^1.9.0",
    "stylelint-scss": "^3.21.0",
    "webpack": "^5.88.1",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1"
  }
}

//addRemoveTask.js
import 'jest-localstorage-mock';

import { addTask, removeTasks, taskListArray } from '../taskFunctions.js';

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
global.localStorage = localStorageMock;

// Mock DOM
const taskListDivMock = document.createElement('ul');
const formMock = document.createElement('form');
const clearBtnMock = document.createElement('button');
document.getElementById = jest.fn((id) => {
  if (id === 'list-container') return taskListDivMock;
  if (id === 'add-new') return formMock;
});
document.querySelector = jest.fn((selector) => {
  if (selector === '.clear-completed') return clearBtnMock;
});

describe('taskFunctions', () => {
  beforeEach(() => {
    taskListArray.length = 0;
    jest.clearAllMocks();
  });

  describe('addTask', () => {
    test('should add a new task to the tasks array and update localStorage', () => {
      const title = 'Task 1';
      addTask(title);

      expect(taskListArray).toHaveLength(1);
      expect(taskListArray[0].title).toBe(title);
      expect(taskListArray[0].completed).toBe(false);
      expect(taskListArray[0].index).toBe(1);
      expect(localStorage.setItem).toHaveBeenCalledWith(
        'taskItems',
        JSON.stringify(taskListArray),
      );
    });

    test('should not add a task if the description is empty', () => {
      const title = '';
      addTask(title);

      expect(taskListArray).toHaveLength(0);
      expect(localStorage.setItem).not.toHaveBeenCalled();
    });
  });;

  describe('removeTasks', () => {
    beforeEach(() => {
      taskListArray.push(
        {
          title: 'Task 1',
          completed: false,
          index: 1,
        },
        {
          title: 'Task 2',
          completed: true,
          index: 2,
        },
      );
    });
    test('should delete the task at the specified index and update localStorage', () => {
      removeTasks(0);
      expect(taskListArray).toHaveLength(1);
      expect(taskListArray[0].title).toBe('Task 2');
      expect(taskListArray[0].completed).toBe(true);
      expect(taskListArray[0].index).toBe(1);
      expect(localStorage.setItem).toHaveBeenCalledWith(
        'taskItems',
        JSON.stringify(taskListArray),
      );
    });
  });
});


//clearcompletedtask.test.js
import 'jest-localstorage-mock';

import clearCompletedTasks from '../clearTask.js';
import {taskListArray, saveTasktoLocal, removeTasks,} from '../taskFunctions.js';

// Mock the localStorage and DOM elements
jest.mock('../taskFunctions.js', () => ({
  taskListArray: [
    { description: 'Task 1', completed: false, index: 1 },
    { description: 'Task 2', completed: false, index: 2 },
    { description: 'Task 3', completed: false, index: 3 },
  ],
  saveTasktoLocal: jest.fn(),
  removeTasks: jest.fn(),
  addTask: jest.fn(),
  updateIndexes: jest.fn(),
}));

const mockDisplayTasks = jest.fn();

jest.mock('../../index.js', () => ({
  displayTasks: mockDisplayTasks,
}));

const emptyTasks = [];

describe('clearCompletedTasks', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should clear all completed tasks', () => {
    clearCompletedTasks(taskListArray);

    expect(taskListArray.length).toBe(3);
    expect(taskListArray[0].description).toBe('Task 1');
    expect(taskListArray[0].completed).toBe(false);
    expect(taskListArray[1].description).toBe('Task 2');
    expect(taskListArray[1].completed).toBe(false);
    expect(taskListArray[2].description).toBe('Task 3');
    expect(taskListArray[2].completed).toBe(false);
    expect(saveTasktoLocal).toHaveBeenCalledTimes(1);
  });

  it('should not delete not completed tasks', () => {
    taskListArray.forEach((task) => {
      taskListArray.completed = false;
    });

    clearCompletedTasks(taskListArray);

    expect(removeTasks).not.toHaveBeenCalled();
  });

  it('should not do anything if the list is empty', () => {
    clearCompletedTasks(emptyTasks);

    expect(emptyTasks.length).toBe(0);
  });
});

//editTaskDescription.test.js

import 'jest-localstorage-mock';

import { editTaskDescription, taskListArray} from '../taskFunctions.js';

describe('Task Functions', () => {
  describe('editTaskDescription', () => {
    beforeEach(() => {
      taskListArray.length = 0;
      localStorage.clear();
    });

    test('should edit the task title and update localStorage', () => {
      // Arrange
      const newtitle = 'New description';
      taskListArray.push({ title: 'Old description', completed: false, index: 1 });

      // Act
      editTaskDescription(0, newtitle);

      // Assert
      expect(taskListArray[0].title).toBe(newtitle);
      expect(localStorage.getItem('taskItems')).toBe(JSON.stringify(taskListArray));
    });
  });
});

//toggleCompletionStatus.test.js

import toggleTaskCompletion from '../statusFunctions.js';
import { taskListArray } from '../taskFunctions.js';

describe('toggleTaskCompletion status', () => {
  beforeEach(() => {
    global.localStorage = {
      getItem: jest.fn(() => JSON.stringify(taskListArray)),
      setItem: jest.fn(),
    };

    // Set initial data
    taskListArray.splice(0, taskListArray.length, // Clear the array
      { title: 'Task 1', completed: false, index: 1 },
      { title: 'Task 2', completed: false, index: 2 });
  });

  afterEach(() => {
    jest.resetAllMocks();
    delete global.localStorage;
  });

  test('should update the completed status of a task', () => {
    const index = 0;
    const newCompletedStatus = true;

    toggleTaskCompletion(index, newCompletedStatus);

    expect(taskListArray[index].completed).toBe(newCompletedStatus);
  });

  test('should update the tasks in localStorage', () => {
    const index = 1;
    const newCompletedStatus = true;

    toggleTaskCompletion(index, newCompletedStatus);

    expect(localStorage.setItem).toHaveBeenCalledWith(
      'taskItems',
      JSON.stringify([
        { title: 'Task 1', completed: false, index: 1 },
        { title: 'Task 2', completed: newCompletedStatus, index: 2 },
      ]),
    );
  });
});